/**
 * Common eslint setting shared between React and non-React projects.
 */
module.exports = {
  extends: [
    /**
     * Eslint opinions from the typescript team.
     */
    "plugin:@typescript-eslint/recommended",
    /**
     * Overwrite all eslint rules that conflict with prettier and
     */
    "plugin:prettier/recommended",
  ],
  plugins: ["only-warn"],
  rules: {
    /**
     * Typescript isn't as smart as it thinks it is. "explicit" any's are allowed.
     * But when a type is possible it's strongly recommended to use or write that type.
     */
    "@typescript-eslint/no-explicit-any": "off",

    /**
     * Only the "log" from console is not allowed.
     * console.log() should be still used for debugging, but these statements shou;d be removed before the git commit.
     * When visiting a webpage that works as expected the console should be empty.
     */
    "no-console": ["warn", { allow: ["warn", "error", "debug", "info"] }],

    /**
     * Allow `for of` syntax.
     * Only re-enable when you need to browserlist IE11 and your bundlesize is causing issues.
     */
    "no-restricted-syntax": "off",

    /**
     * Allow function hoisting to improve code readability
     */
    "@typescript-eslint/no-use-before-define": [
      "warn",
      { functions: false, classes: true, variables: true },
    ],

    /**
     * If you're using @ts-ignore, We assume you know what you're doing.
     * No need to add insult to injury and requiring additional eslint-ignore comment.
     * (Rule was renamed from @typescript-eslint/ban-ts-ignore)
     */
    "@typescript-eslint/ban-ts-comment": "off",

    /**
     * Allow importing devDependencies.
     * The important part is that the version is specified in the package.json when importing a library directly.
     * Note: Re-enable disallowing devDependencies when you're using `npm prune` and SSR.
     */
    "import/no-extraneous-dependencies": ["warn", { devDependencies: true }],

    /**
     * Although its desired to write regular functions (which is possible ifyou don't use `this`)
     * there are a lot of cases where not using `this` in a method is correct.
     */
    "class-methods-use-this": "off",

    /**
     * An additional convention to the import ordering is that the (s)css is imported last.
     * Applying the css after the css of the imported components is generally desired, but feel free to create exceptions where needed.
     *
     * Note: This rule affects the css ordering and when the specificity is the same this impacts the styles that are being applied.
     */
    "import/order": [
      "warn",
      {
        pathGroups: [
          {
            pattern: "{.,..}/*.{s,}css",
            group: "object",
            position: "after",
          },
        ],
        warnOnUnassignedImports: true,
      },
    ],
  },
  overrides: [
    {
      files: ["*.js", "*.cjs"],
      rules: {
        // Allow `require()` in config files
        "@typescript-eslint/no-var-requires": "off",
        "global-require": "off",
      },
    },
  ],
  settings: {
    "import/resolver": {
      typescript: {},
    },
  },
};
