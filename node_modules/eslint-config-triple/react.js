module.exports = {
  extends: [
    "eslint-config-airbnb",
    "eslint-config-airbnb/hooks",
    /**
     * Removes airbnb's rules that are incompatible with the typescript variants and configures the typescript rules.
     * Also adds linting rules for typings. (PascalCase for types)
     */
    "eslint-config-airbnb-typescript",
    "./common",
  ].map(require.resolve),
  rules: {
    /**
     * Use id's when they are available!
     * When you donâ€™t have stable IDs for rendered items, you may use the item index as a key as a last resort.
     */
    "react/no-array-index-key": "off",

    /**
     * ESLint is not able to detect the default values when using functional components.
     */
    "react/require-default-props": "off",

    /**
     * We are using TypeScript, and the cleanest way to use `React.FC` is to write it as a const:
     *
     *   type Props = { myProp: string };
     *   const MyComponent: React.FC<Props> = ({ myProp }) => <div>{myProp}</div>
     */
    "react/function-component-definition": "off",

    /**
     * Modern build tools will automatically inject the React import when needed.
     */
    "react/react-in-jsx-scope": "off",

    /**
     * We are using TypeScript and this rule fails to detect the typed props.
     */
    "react/prop-types": "off",

    /**
     * This rule was meant to prevent `this.onClick.bind(this)` in class based components.
     * But the AirBnB settings give it an unfair advantage to the `const onClick = () =>` over the `function onClick()` notation.
     */
    "react/jsx-no-bind": "off",
  },
};
